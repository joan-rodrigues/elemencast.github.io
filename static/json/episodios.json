{
    "episodios": [
        {
            "titulo": {
                "resumido": "Atomic Design",
                "completo": "Lançamento do podcast! Você já ouviu falar sobre Atomic Design?"
            },
            "subtitulo": "Parte 1",
            "participantes": [
                {
                    "foto": "/static/img/participantes/luigui.png",
                    "nome": "Luigui Delyer",
                    "email": "elemencast@s1x.com.br",
                    "github": "https://www.github.com/luiguild",
                    "twitter": "https://www.twitter.com/luiguild",
                    "minibio": "Ativista de Software Livre, representante da Mozilla no Brasil, GeoDeveloper apaixonado por mapas e data-visualization.\nFrontEnd do time de inovação na Webradar, uma empresa que trabalha com BigData e IoT Analytics. No trabalho, uso e adoro Vanilla JavaScript, VueJS, AngularJS, PugLang, LESS e SASS. Já fui designer gráfico e curto UI. De vez em quando cozinho e tenho vida além da informática. Sou daqueles que dançam ouvindo música enquanto trabalha."
                }
            ],
            "audio": "/static/audio/ep1-atomic-design.mp3",
            "texto": "Oi.\n\nEste é o primeiro episódio de um podcast sobre programação que está em construção.\nSe você estiver ouvindo pelo browser, pode perceber o que eu estou dizendo só de olhar para a página onde está o player.\nEste é o ELEMENCAST e eu, Luigui Delyer, tentarei trazer alguns drops de conteúdo de no máximo 10 minutos toda semana. O objetivo aqui é aprender ainda mais sobre programação.\nFalaremos sobre front-end, javascript, css, html5, metodologias de projetos, componentização, nodejs, mapas e gis, programação funcional e uma vida como programador organizada em elementos…\nEu inicío esse podcast hoje já falando de um tema que tenho gostado muito e gostaria de compartilhar com você como tem sido desenvolver no front de forma atômica e pra isso, precisamos começar falando diretamente sobre uma metodologia de projeto que me agrada muito, o Atomic Design.\nSe você nunca ouviu falar sobre isso, eu te digo de uma forma simples rápida:\n\nAtomic Design nada mais é do que uma forma de desenhar projetos.\nSeja na documentação, no layout, na forma com que criamos os testes, como separamos os arquivos, como pensamos nas funcionalidades do programa, na forma com que vamos reusar o código, entre outros.\nExistem diversas outras formas de fazer isso, algumas bem conhecidas são DDD e SOLID. Você pode ter lembrado do famoso MVC também, porém, ele não entra nesse caso já que o padrão MVC não é um design pattern propriamente dito.\nEu escolhi Atomic Design porque me deparei com o fato de que eu consigo levar essa maneira de pensar pra quase qualquer coisa que esteja relacionada a forma com que eu programo algo.\n\nDurante os próximo episódios nós conversaremos a fundo sobre como funciona isso e teremos uma série especializada no tema. Descobriremos qual tecnologia usar e como  chegar na conclusão de que nosso software precisa ser componentizado, atômico e reativo.\nNas próximas semanas também, eu terei aqui comigo, alguns amigos que nos ajudarão a entender ainda mais alguns dos temas que eu citei logo no início.\nNeste primeiro episódio eu irei explanar superficialmente os conceitos básicos de Atomic Design, mas pra isso, precisamos de teoria e vamos voltar um pouco nos tempos da escola pra falarmos sobre um assunto muito antigo mas completamente atual.\n\nSegundo a Wikipédia, em física e química, modelo atômico é todo modelo científico que se usa para explicar os átomos e seus comportamentos.\nNo século V antes de Cristo, alguns filósofos defendiam o atomismo, pois acreditavam que dividindo a matéria em pedaços cada vez menores, seria possível encontrar partículas que seriam invisíveis ao olho humano e, segundo esses pensadores, os átomos filosóficos vêm em uma variedade infinita de formas e tamanhos cada uma delas sendo indestrutíveis, imutáveis e cercadas por um vazio onde colidem com outras partículas ou se reúnem em algo que hoje chamamos de moléculas, organismos e matéria.\n\nPartindo desse princípio, nasceu a proposta de que o todo, se compõe não só de átomos ou partículas indivisíveis de natureza idêntica. Aí então nasceu a teoria da unidade e imutabilidade do ser.\nAcredita-se que vácuo e matéria desde a eternidade interagem entre si dando origem ao movimento, e que os átomos apresentam as propriedades de: forma, movimento, tamanho e impenetrabilidade, e, por meio de choques entre si, dão origem a objetos.\nUm desses filósofos, defendia que a matéria era descontínua, portanto, ao invés dos corpos macroscópicos que nós vemos, os corpos microscópicos ou os átomos não podem ocupar o mesmo espaço no tempo nem podem ser divididos, sendo suas mudanças observadas em fenômenos físicos e químicos como por exemplo a junção ou separação dos átomos e que qualquer matéria é resultado da combinação dos átomos dos quatro elementos básicos: ar; fogo; água e terra.\n\nTá, e o que programação tem a ver com nisso?\n\nO criador do Atomic Design, Brad Frost, desenhou cinco camadas básicas de divisão unindo todo esse conceito aí que você ouviu agora. No pensamento dele, nosso software pode ser separado por ÁTOMOS, MOLÉCULAS, ORGANISMOS, TEMPLATES e PÁGINAS.\nE há pouco tempo atrás, estudando mais sobre a metodologia, eu encontrei lugar para mais dois elementos os BÓSONS e os QUARKS.\nEu vou explicar um por um, relaxa.\n\nÁTOMO\nUm elementos mínimo presente em uma interface gráfica.\nNo mundo dos componentes eles são labels, inputs, campos de formulário, botões, títulos, parágrafos, etc.\n\nMOLÉCULA\nSão dois ou mais átomos mantidos juntos para funcionarem com um propósito único.\nUma molécula seria então um input junto com um botão que juntos, tem a função de busca numa interface gráfica.\n\nORGANISMOS\nNaturalmente, são duas ou mais moléculas que começam a moldar a navegação e a leitura do conteúdo nessa interface.\nAumentando o exemplo, a molécula de busca ao lado da molécula de navegação e do logotipo, faz parte do organismo header.\n\nTEMPLATES\nBom, você já deve ter entendido que estamos falando cada vez mais sobre abstrações da interface, né? Os templates consistem em vários organismos combinados para formar páginas.\n\nPÁGINAS\nE as páginas são uma evolução natural dos templates. Ou seja, são os layouts em si.\nLembra que eu disse que encontrei o caso de uso pra mais dois elementos?\n\nBÓSONS\nSão aquelas “coisinhas” que fazem uma grande diferença no visual e legibilidade de uma interface. Eles não precisam ser literalmente visíveis, pois são abstratos, como paletas de cores, fontes, animações e aspectos ainda mais invisíveis de uma interface como grids.\n\nQUARKS\nUm cara desses nunca é encontrado isoladamente, isto significa que um Quark só existirá quando existir um elemento completo.\nComo por exemplo, itens que enviam feedback para o usuário, como barras de progresso ou rolagem, validações em formulário, hints, dicas, tips de ajuda e etc…\n\nOu seja, imagina agora que tudo isso junto na mesma página tem uma vida própria, um escopo muito reduzido e uma capacidade natural de interagir entre si. Como cada item desse é um componente vivendo no seu app, você precisa ter um orquestrador, digamos assim, e é aí que entra o conceito de controle de estados imutáveis e reatividade entre todos os componentes… \n\nAfinal, quando você clicar no átomo de botão que está dentro da molécula de busca, o organismo de conteúdo precisará ser atualizado dentro do template de pesquisa para renderizar a página com o resultado…\n\nTá… Acho que agora você deve estar pensando em que é coisa pra caramba pra controlar e que é muito difícil abstrair tudo e começar a pensar assim… Bom… Eu preciso te dizer que não, é bem pelo contrário… Imagina que como eu disse agora pouco, o mundo funciona assim, a natureza rege tudo dessa maneira, então cabe a nós darmos continuidade na forma natural da vida dentro do nosso mundo digital.\nQuando você fizer isso, vai começar a perceber e será natural a aplicação de vários conceitos de programação funcional (que falaremos em breve), funções puras, códigos explícitos, escopos mínimos, reatividade natural, componentização obrigatória e também da coisa mais desejada de todos os programadores e gestores de TI… \n\nREÚSO DE CÓDIGO DE VERDADE!\n\nEu te garanto que a partir do momento que você decidir usar Atomic Design no seu dia a dia como programador, sua produtividade aumentará absurdamente.\nBom, o que eu tinha pra te dizer hoje era isso. Eu queria instigar sua curiosidade pra que você pesquise mais sobre o assunto e me ajude a fazer este podcast ficar ainda mais legal. Eu também preciso que você deixe o seu e-mail aí em baixo do player pra você ficar por dentro da newsletter que eu tô bolando pra te avisar quando os próximos conteúdos ficarem prontos e é claro, preciso da sua colaboração enviando este conteúdo pro seu amigo mais próximo ou até pro seu chefe que tá em dúvida sobre qual metodologia usar naquele projeto novo da empresa.\nVocê pode me ajudar diretamente indo até o Github do ELEMENCAST e abrindo uma issue sobre o que você quiser, por lá podemos conversar diretamente e você pode baixar qualquer episódio que eu liberar, todos estarão lá, inclusive este.\nUma comunidade forte, é uma comunidade unida que se ajuda.\nMuito obrigado até aqui. Até a próxima."
        }
    ]
}
